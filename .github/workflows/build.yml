name: Build and run tests

on:
  push:
    branches: [main]
    paths:
      - "src/**/*.cpp"
      - "src/**.c"
      - "include/**/*.hpp"
      - "include/**/*.h"
      - "CMakeLists.txt"
      - "conanfile.txt"
      - "conan.lock"
      - "test/**/*.cpp"
      - "test/**/*.hpp"
      - "run-build.sh"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # TODO: bring back gcc16 currently Conan does not accept that versions
        version: ["gcc15", "clang20", "clang21"]

    runs-on: ubuntu-latest

    container:
      # TODO: use stable branch when they have gcc15 and clang21
      # TODO: unpin cmake after using stable branch
      image: alpine:edge

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Build
        run: |
          export MATRIX_VERSION=${{ matrix.version }}
          [[ ${MATRIX_VERSION} =~ 'clang' ]] && apk add ${MATRIX_VERSION}
          [[ ! ${MATRIX_VERSION} =~ 'clang' ]] && apk add g++
          apk add cmake cmake-extras make python3 libx11-dev libxcb-dev libfontenc-dev libice-dev libsm-dev libxau-dev libxaw-dev libxcomposite-dev libxcursor-dev libxdamage-dev libxdmcp-dev libxext-dev libxfixes-dev libxi-dev libxinerama-dev libxkbfile-dev libxmu-dev libxpm-dev libxrandr-dev libxrender-dev libxres-dev libxscrnsaver-dev libxt-dev libxtst-dev libxv-dev libxxf86vm-dev xcb-util-wm-dev xcb-util-image-dev xcb-util-keysyms-dev xcb-util-renderutil-dev libxinerama-dev libxcb-dev xcb-util-dev xcb-util-cursor-dev bash musl-dev libudev-zero-dev mesa-gl mesa-dev
          cmake --version
          python -m venv .venv
          source .venv/bin/activate
          pip install conan
          conan profile detect
          export CMAKE_VERSION=$(cmake --version | grep -Eo '([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+)' )
          echo "\n[platform_tool_requires]\n${CMAKE_VERSION}" > ~/.conan2/profiles/default
          ./run-build.sh -DCMAKE_BUILD_TYPE=Release --target=3dgraph_test
        shell: sh
